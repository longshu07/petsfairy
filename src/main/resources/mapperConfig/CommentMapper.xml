<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.longshu.petsfairy.dao.CommentMapper" >
  <resultMap id="BaseResultMap" type="com.longshu.petsfairy.entity.Comment" >
    <id column="comment_id" property="commentId" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="comment_self_id" property="commentSelfId" jdbcType="VARCHAR" />
    <result column="reply_comment_id" property="replyCommentId" jdbcType="VARCHAR" />
    <result column="invitation_id" property="invitationId" jdbcType="VARCHAR" />
    <result column="push_state" property="pushState" jdbcType="INTEGER" />
  </resultMap>

  <resultMap id="ReplyPushResultMap" type="com.longshu.petsfairy.entity.ReplyPush" >
    <id column="comment_id" property="commentId" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="comment_self_id" property="commentSelfId" jdbcType="VARCHAR" />
    <result column="reply_comment_id" property="replyCommentId" jdbcType="VARCHAR" />
    <result column="invitation_id" property="invitationId" jdbcType="VARCHAR" />
    <result column="push_state" property="pushState" jdbcType="INTEGER" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="avatarurl" property="avatarurl" jdbcType="VARCHAR" />
  </resultMap>



  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    comment_id, content, create_time, comment_self_id, reply_comment_id, invitation_id,
    push_state
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.longshu.petsfairy.entity.CommentExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from comment
    where comment_id = #{commentId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from comment
    where comment_id = #{commentId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.longshu.petsfairy.entity.CommentExample" >
    delete from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.longshu.petsfairy.entity.Comment" >
    insert into comment (comment_id, content, create_time,
      comment_self_id, reply_comment_id, invitation_id,
      push_state)
    values (#{commentId,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP},
      #{commentSelfId,jdbcType=VARCHAR}, #{replyCommentId,jdbcType=VARCHAR}, #{invitationId,jdbcType=VARCHAR},
      #{pushState,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.longshu.petsfairy.entity.Comment" >
    insert into comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        comment_id,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="commentSelfId != null" >
        comment_self_id,
      </if>
      <if test="replyCommentId != null" >
        reply_comment_id,
      </if>
      <if test="invitationId != null" >
        invitation_id,
      </if>
      <if test="pushState != null" >
        push_state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        #{commentId,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commentSelfId != null" >
        #{commentSelfId,jdbcType=VARCHAR},
      </if>
      <if test="replyCommentId != null" >
        #{replyCommentId,jdbcType=VARCHAR},
      </if>
      <if test="invitationId != null" >
        #{invitationId,jdbcType=VARCHAR},
      </if>
      <if test="pushState != null" >
        #{pushState,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.longshu.petsfairy.entity.CommentExample" resultType="java.lang.Integer" >
    select count(*) from comment
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update comment
    <set >
      <if test="record.commentId != null" >
        comment_id = #{record.commentId,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.commentSelfId != null" >
        comment_self_id = #{record.commentSelfId,jdbcType=VARCHAR},
      </if>
      <if test="record.replyCommentId != null" >
        reply_comment_id = #{record.replyCommentId,jdbcType=VARCHAR},
      </if>
      <if test="record.invitationId != null" >
        invitation_id = #{record.invitationId,jdbcType=VARCHAR},
      </if>
      <if test="record.pushState != null" >
        push_state = #{record.pushState,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update comment
    set comment_id = #{record.commentId,jdbcType=VARCHAR},
    content = #{record.content,jdbcType=VARCHAR},
    create_time = #{record.createTime,jdbcType=TIMESTAMP},
    comment_self_id = #{record.commentSelfId,jdbcType=VARCHAR},
    reply_comment_id = #{record.replyCommentId,jdbcType=VARCHAR},
    invitation_id = #{record.invitationId,jdbcType=VARCHAR},
    push_state = #{record.pushState,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.longshu.petsfairy.entity.Comment" >
    update comment
    <set >
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="commentSelfId != null" >
        comment_self_id = #{commentSelfId,jdbcType=VARCHAR},
      </if>
      <if test="replyCommentId != null" >
        reply_comment_id = #{replyCommentId,jdbcType=VARCHAR},
      </if>
      <if test="invitationId != null" >
        invitation_id = #{invitationId,jdbcType=VARCHAR},
      </if>
      <if test="pushState != null" >
        push_state = #{pushState,jdbcType=INTEGER},
      </if>
    </set>
    where comment_id = #{commentId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.longshu.petsfairy.entity.Comment" >
    update comment
    set content = #{content,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      comment_self_id = #{commentSelfId,jdbcType=VARCHAR},
      reply_comment_id = #{replyCommentId,jdbcType=VARCHAR},
      invitation_id = #{invitationId,jdbcType=VARCHAR},
      push_state = #{pushState,jdbcType=INTEGER}
    where comment_id = #{commentId,jdbcType=VARCHAR}
  </update>

  <!-- 查询某个帖子下面的全部评论 不包括评论下面的回复 分页查询 selectCommentByInvitationIdPage-->
  <select id="selectCommentByInvitationIdPage" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM comment WHERE invitation_id = #{invitationId} AND reply_comment_id = 'NONE'  ORDER BY create_time DESC
  </select>

  <!--通过已经查询出来的全部评论，获取这些评论下面的回复-->
  <select id="selectReplyByReplyCommentId" parameterType="java.lang.String" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List" />
    FROM comment c1
    WHERE c1.invitation_id= #{replyCommentId} ORDER BY c1.create_time DESC
  </select>

  <!--//通过帖子id查找帖子id下面的评论数量，如果是回复的话，这个invitationid就是评论id了，不包括评论中的回复 findCommentCountsByInvitationId-->
  <select id="findCommentCountsByInvitationId" parameterType="java.lang.String" resultType="java.lang.Integer">
    SELECT
    COUNT(*)
    FROM
    comment
    WHERE comment.invitation_id = #{invitationId}
  </select>

  <!--联表查询 查询帖子下面的评论有没有被推送-->
  <select id="selectCommentPush" parameterType="java.lang.String" resultMap="ReplyPushResultMap">
    SELECT comment.*
    FROM comment, invitation, customer
    WHERE customer.customer_id = #{customerId} AND customer.customer_id = invitation.invitation_master_id AND comment.invitation_id = invitation.invitation_id AND comment.push_state = 0
    ORDER BY comment.create_time DESC
  </select>


  <!--联表查询 查询谁回复了谁-->
  <select id="selectReplyPush" parameterType="java.lang.String" resultMap="ReplyPushResultMap">
    SELECT DISTINCT comment.*,customer.nickname,customer.avatarurl
    FROM comment, customer
    WHERE comment.reply_comment_id = #{replyCommentId}  AND comment.push_state = 0 AND  customer.customer_id = comment.comment_self_id
    ORDER BY comment.create_time DESC
  </select>

  <!--修改已推送的消息标志 updatePushStateByCommentList-->
  <!--批量处理更新消息为已签收-->
  <!--in 批量插入，使用mybatis的foreach标签 collection代表类型  list的开始的是左括号所以open="("， 分隔符是 ，separator=","   关闭符是右括号close=")"-->
  <update id="updatePushStateByCommentList">
    update comment set push_state = 1 where comment_id in
    <foreach collection="list" item="item" index="index" open="(" separator="," close=")">
      #{item}
    </foreach>

  </update>

</mapper>